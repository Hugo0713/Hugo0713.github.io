<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>OS-02 Functions and Structures</title>
    <url>/2025/02/21/OS02/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Operating systems provide an environment for program executions and services to programs/users<br><span id="more"></span></p>
<p><img src="/images/OS02-overview.jpg" alt="overview"></p>
<h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><h3 id="User-Interface"><a href="#User-Interface" class="headerlink" title="User Interface"></a>User Interface</h3><p><strong>Shell</strong>: A computer program that exposes an OS’s services to a human user or other programs. OS shells use either a command-line interface (CLI) or a graphical user interface (GUI)<br>An interpreter</p>
<h4 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h4><p>Shell：</p>
<ul>
<li>Built-in commands: The interpreter contains the code to execute the command. <ul>
<li>直接执行 eg. <code>cd</code></li>
</ul>
</li>
<li>System program commands: The command is a program name. <ul>
<li>查找系统文件执行 eg. <code>ls</code></li>
</ul>
</li>
</ul>
<h3 id="System-Calls"><a href="#System-Calls" class="headerlink" title="System Calls"></a>System Calls</h3><h4 id="Mode"><a href="#Mode" class="headerlink" title="Mode"></a>Mode</h4><ul>
<li>User</li>
<li>Kernel<br>转换：系统调用，中断，异常</li>
</ul>
<h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><p>System calls are mostly accessed by programs via a high-level Application Program Interface (API) rather than direct system call use.<br>性质：</p>
<ul>
<li>易用：无需了解底层实现，直接调用</li>
<li>可移植：API具有跨平台兼容性</li>
<li>安全：直接调用与内核交互</li>
</ul>
<h4 id="Parameter-Passing"><a href="#Parameter-Passing" class="headerlink" title="Parameter Passing"></a>Parameter Passing</h4><ul>
<li>寄存器：快，少</li>
<li>内存表</li>
<li>栈</li>
</ul>
<p>The last two methods do not limit the number or length of parameters being passed 性能损耗</p>
<h4 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h4><h5 id="Type-1-Process-control"><a href="#Type-1-Process-control" class="headerlink" title="Type 1: Process control"></a>Type 1: Process control</h5><ul>
<li>Control the current process: end， abort， execute， load……</li>
<li>Control a different process</li>
<li>Allocate memory and release memory</li>
<li>Debugger</li>
<li>Locks for managing access to shared data between processes</li>
</ul>
<h5 id="Type-2-File-management"><a href="#Type-2-File-management" class="headerlink" title="Type 2: File management"></a>Type 2: File management</h5><h5 id="Type-3-Device-management"><a href="#Type-3-Device-management" class="headerlink" title="Type 3: Device management"></a>Type 3: Device management</h5><h5 id="Type-4-Information-maintenance"><a href="#Type-4-Information-maintenance" class="headerlink" title="Type 4: Information maintenance"></a>Type 4: Information maintenance</h5><h5 id="Type-5-Communications"><a href="#Type-5-Communications" class="headerlink" title="Type 5: Communications"></a>Type 5: Communications</h5><ul>
<li>message passing model 内核中转，离散</li>
<li>shared-memory model 共享物理内存</li>
</ul>
<h5 id="Type-6-Protection"><a href="#Type-6-Protection" class="headerlink" title="Type 6: Protection"></a>Type 6: Protection</h5><h3 id="System-Services"><a href="#System-Services" class="headerlink" title="System Services"></a>System Services</h3><p>In computer hierarchy, system services are higher than system calls.</p>
<p>System services use system calls to interact with the OS kernel</p>
<h4 id="Programs"><a href="#Programs" class="headerlink" title="Programs"></a>Programs</h4><ul>
<li>System Programs：Login program, shell, window manager</li>
<li>Application Programs：Email, web browsers, gaming software, word processors</li>
</ul>
<h4 id="Why-Applications-are-Operating-System-Specific："><a href="#Why-Applications-are-Operating-System-Specific：" class="headerlink" title="Why Applications are Operating System Specific："></a>Why Applications are Operating System Specific：</h4><p>Reason: Each operating system provides its own unique system calls</p>
<p>eg. file format</p>
<h4 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h4><ul>
<li>File management</li>
<li>Status information <ul>
<li>Some systems implement a registry (注册表) - used to store and retrieve configuration information </li>
</ul>
</li>
<li>File modification</li>
<li>Programming-language support</li>
<li>Program loading and execution</li>
<li>Communications</li>
<li>Background Services<ul>
<li>Known as services, subsystems, daemons</li>
</ul>
</li>
</ul>
<h2 id="Operating-System-Structures"><a href="#Operating-System-Structures" class="headerlink" title="Operating System Structures"></a>Operating System Structures</h2><ul>
<li>Simple Structure – MS-DOS</li>
<li>Monolithic (单体)Structure – Original UNIX</li>
<li>Layered Approach</li>
<li>Microkernel System Structure - Mach</li>
<li>Hybrid Systems - windows, macOS, Android </li>
</ul>
<h2 id="Virtual-Machines"><a href="#Virtual-Machines" class="headerlink" title="Virtual Machines"></a>Virtual Machines</h2><p><img src="/images/OS02-V.jpeg" alt="visulization"></p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p><img src="/images/OS02-S.jpeg" alt="topics"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>espnet的enh训练任务分析笔记</title>
    <url>/2025/02/19/espnet%E7%9A%84enh.sh%E7%9A%84%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>This is the common recipe for ESPnet2 speech enhancement frontend.</strong><br><strong>这是 ESPnet2 语音增强前端的通用配方。</strong></p>
<p>本文为笔者学习espnet语音处理包语音增强部分的学习笔记，初稿为<strong>claude-3.5-sonnet</strong>辅助生成，后续会不断在此基础上更新，加入自己的理解。</p>
<span id="more"></span>
<p>以下为espnet工具包相关的网址</p>
<p><a href="https://github.com/espnet/espnet">ESPnet</a></p>
<p><a href="https://espnet.github.io/espnet/installation.html">espnet installation</a></p>
<p><a href="https://github.com/espnet/espnet/blob/master/egs2/TEMPLATE/enh1/enh.sh">enh.sh</a></p>
<p><a href="https://espnet.github.io/espnet/recipe/enh1.html">enh.sh官方文档</a></p>
<p>该enh.sh在espnet中的位置：<code>egs2/TEMPLATE/enh1/enh.sh</code> , 13 stages are included.</p>
<h2 id="训练任务流程"><a href="#训练任务流程" class="headerlink" title="训练任务流程"></a>训练任务流程</h2><ul>
<li>选择数据集</li>
<li>选择配置文件(可更改具体参数)</li>
<li>运行脚本</li>
</ul>
<p>以经典数据集<code>wsj0_2mix</code>为例，<a href="https://github.com/espnet/espnet/blob/master/egs2/wsj0_2mix">wsj0_2mix</a>,在<code>conf</code>目录的<code>tuning</code>子目录中选择配置，我选择的是<code>train_enh_rnn_tf.yaml</code>,该配置用于训练一个基于 RNN 的语音分离模型，其中<strong>tf</strong>后缀在这个配置文件名中代表 <strong>Time-Frequency domain（时频域）</strong></p>
<p>接着运行<code>run.sh</code>,比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./run.sh --stage 1 --stop_stage 6 --conf conf/tuning/train_enh_rnn_tf.yaml</span><br></pre></td></tr></table></figure>
<p>以下是run.sh的具体内容（因为很短就贴出来）<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment"># Set bash to &#x27;debug&#x27; mode, it will exit on :</span></span><br><span class="line"><span class="comment"># -e &#x27;error&#x27;, -u &#x27;undefined variable&#x27;, -o ... &#x27;error in pipeline&#x27;, -x &#x27;print commands&#x27;,</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="built_in">set</span> -u</span><br><span class="line"><span class="built_in">set</span> -o pipefail</span><br><span class="line"></span><br><span class="line">min_or_max=min <span class="comment"># &quot;min&quot; or &quot;max&quot;. This is to determine how the mixtures are generated in local/data.sh.</span></span><br><span class="line">sample_rate=8k</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">train_set=<span class="string">&quot;tr_<span class="variable">$&#123;min_or_max&#125;</span>_<span class="variable">$&#123;sample_rate&#125;</span>&quot;</span></span><br><span class="line">valid_set=<span class="string">&quot;cv_<span class="variable">$&#123;min_or_max&#125;</span>_<span class="variable">$&#123;sample_rate&#125;</span>&quot;</span></span><br><span class="line">test_sets=<span class="string">&quot;tt_<span class="variable">$&#123;min_or_max&#125;</span>_<span class="variable">$&#123;sample_rate&#125;</span> &quot;</span></span><br><span class="line"></span><br><span class="line">./enh.sh \</span><br><span class="line">    --train_set <span class="string">&quot;<span class="variable">$&#123;train_set&#125;</span>&quot;</span> \</span><br><span class="line">    --valid_set <span class="string">&quot;<span class="variable">$&#123;valid_set&#125;</span>&quot;</span> \</span><br><span class="line">    --test_sets <span class="string">&quot;<span class="variable">$&#123;test_sets&#125;</span>&quot;</span> \</span><br><span class="line">    --fs <span class="string">&quot;<span class="variable">$&#123;sample_rate&#125;</span>&quot;</span> \</span><br><span class="line">    --lang en \</span><br><span class="line">    --ngpu 1 \</span><br><span class="line">    --local_data_opts <span class="string">&quot;--sample_rate <span class="variable">$&#123;sample_rate&#125;</span> --min_or_max <span class="variable">$&#123;min_or_max&#125;</span>&quot;</span> \</span><br><span class="line">    --enh_config conf/tuning/train_enh_dprnn_tasnet.yaml \</span><br><span class="line">    <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br></pre></td></tr></table></figure></p>
<p>注意到，调用的<code>enh.sh</code>,实际上就是TEMPLATE中的enh.sh(下文会具体分析)</p>
<p>1) 训练过程监控:</p>
<ul>
<li>查看日志: <code>tail -f exp/enh_train_*/train.log</code></li>
<li>查看关键指标：<code>grep &quot;loss:&quot; exp/enh_train_*/train.log</code></li>
</ul>
<p>2) 评估模型<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./run.sh --stage 7 --stop_stage 8 \</span><br><span class="line">    --conf conf/tuning/train_enh_rnn_tf.yaml</span><br></pre></td></tr></table></figure></p>
<p>查看评估结果:</p>
<ul>
<li>结果保存在 <code>exp/enh_train_*/RESULTS.txt</code></li>
<li>包含SI-SNR、SDR等指标</li>
</ul>
<p>3) 使用模型</p>
<p>对单个音频进行增强:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m espnet2.bin.enh_inference \</span><br><span class="line">    --audio_file /path/to/mixed.wav \</span><br><span class="line">    --config exp/enh_train_*/config.yaml \</span><br><span class="line">    --model_file exp/enh_train_*/valid.acc.best.pth \</span><br><span class="line">    --output_dir ./enhanced</span><br></pre></td></tr></table></figure></p>
<p>获取增强后的音频:</p>
<ul>
<li>增强结果保存在 <code>./enhanced</code> 目录</li>
<li>每个说话人的分离结果单独保存</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1) 训练中断后继续:</p>
<ul>
<li>直接运行相同的命令即可</li>
<li>ESPnet会自动加载最新的检查点</li>
</ul>
<p>2) 常见问题:</p>
<ul>
<li>内存不足: 减小 batch_size</li>
<li>显存不足: 减小 batch_size 或使用梯度累积</li>
<li>训练不收敛: 调整学习率或检查数据预处理</li>
</ul>
<p>3) 建议:</p>
<ul>
<li>先用小数据集测试流程</li>
<li>保存好配置文件和日志</li>
<li>定期备份实验结果</li>
</ul>
<h2 id="配置文件分析"><a href="#配置文件分析" class="headerlink" title="配置文件分析"></a>配置文件分析</h2><h3 id="基础训练参数"><a href="#基础训练参数" class="headerlink" title="基础训练参数"></a>基础训练参数</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">optim:</span> <span class="string">adam</span>  <span class="comment"># 优化器选择：adam优化器</span></span><br><span class="line"><span class="attr">init:</span> <span class="string">xavier_uniform</span>  <span class="comment"># 参数初始化方式：xavier均匀分布初始化</span></span><br><span class="line"><span class="attr">max_epoch:</span> <span class="number">100</span>  <span class="comment"># 最大训练轮数</span></span><br><span class="line"><span class="attr">batch_type:</span> <span class="string">folded</span>  <span class="comment"># 批次类型：folded表示按序列长度折叠</span></span><br><span class="line"><span class="attr">batch_size:</span> <span class="number">8</span>  <span class="comment"># 每批次样本数</span></span><br><span class="line"><span class="attr">num_workers:</span> <span class="number">4</span>  <span class="comment"># 数据加载器的并行工作进程数</span></span><br></pre></td></tr></table></figure>
<h3 id="优化器配置"><a href="#优化器配置" class="headerlink" title="优化器配置"></a>优化器配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">optim_conf:</span></span><br><span class="line">    <span class="attr">lr:</span> <span class="number">1.0e-03</span>          <span class="comment"># 初始学习率</span></span><br><span class="line">    <span class="attr">eps:</span> <span class="number">1.0e-08</span>         <span class="comment"># 数值稳定性参数</span></span><br><span class="line">    <span class="attr">weight_decay:</span> <span class="number">1.0e-7</span> <span class="comment"># L2正则化系数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 早停耐心值：验证集性能多少轮未改善就停止</span></span><br><span class="line"><span class="attr">patience:</span> <span class="number">10</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证集调度器判断标准</span></span><br><span class="line"><span class="attr">val_scheduler_criterion:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">valid</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">loss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最佳模型保存标准</span></span><br><span class="line"><span class="attr">best_model_criterion:</span></span><br><span class="line"><span class="bullet">-</span>   <span class="bullet">-</span> <span class="string">valid</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">si_snr</span>    <span class="comment"># 尺度不变信噪比</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">max</span>       <span class="comment"># 最大化</span></span><br><span class="line"><span class="bullet">-</span>   <span class="bullet">-</span> <span class="string">valid</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">loss</span>      <span class="comment"># 损失值</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">min</span>       <span class="comment"># 最小化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存最好的模型数量</span></span><br><span class="line"><span class="attr">keep_nbest_models:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 学习率调度器：当验证集性能不再提升时降低学习率</span></span><br><span class="line"><span class="attr">scheduler:</span> <span class="string">reducelronplateau</span></span><br><span class="line"><span class="attr">scheduler_conf:</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">min</span>            <span class="comment"># 监控模式：最小化</span></span><br><span class="line">    <span class="attr">factor:</span> <span class="number">0.7</span>         <span class="comment"># 学习率降低因子</span></span><br><span class="line">    <span class="attr">patience:</span> <span class="number">1</span>         <span class="comment"># 调度器耐心值</span></span><br></pre></td></tr></table></figure>
<h3 id="损失函数配置"><a href="#损失函数配置" class="headerlink" title="损失函数配置"></a>损失函数配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A list for criterions</span></span><br><span class="line"><span class="comment"># The overlall loss in the multi-task learning will be:</span></span><br><span class="line"><span class="comment"># loss = weight_1 * loss_1 + ... + weight_N * loss_N</span></span><br><span class="line"><span class="comment"># The default `weight` for each sub-loss is 1.0</span></span><br><span class="line"><span class="attr">criterions:</span></span><br><span class="line">  <span class="comment"># 第一个损失函数：均方误差(MSE)</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mse</span></span><br><span class="line">    <span class="attr">conf:</span></span><br><span class="line">      <span class="attr">compute_on_mask:</span> <span class="literal">True</span>   <span class="comment"># 在掩码上计算</span></span><br><span class="line">      <span class="attr">mask_type:</span> <span class="string">PSM</span>         <span class="comment"># 相位敏感掩码</span></span><br><span class="line">    <span class="attr">wrapper:</span> <span class="string">pit</span>             <span class="comment"># 用PIT（排列不变训练）包装</span></span><br><span class="line">    <span class="attr">wrapper_conf:</span></span><br><span class="line">      <span class="attr">weight:</span> <span class="number">1.0</span>           <span class="comment"># 损失权重</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第二个损失函数：L1损失</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">l1</span></span><br><span class="line">    <span class="attr">conf:</span></span><br><span class="line">      <span class="attr">compute_on_mask:</span> <span class="literal">False</span> <span class="comment"># 在波形上计算</span></span><br><span class="line">    <span class="attr">wrapper:</span> <span class="string">pit</span></span><br><span class="line">    <span class="attr">wrapper_conf:</span></span><br><span class="line">      <span class="attr">weight:</span> <span class="number">1.0</span></span><br><span class="line">      <span class="attr">independent_perm:</span> <span class="literal">False</span> <span class="comment"># 使用前一个criterion的排列顺序</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第三个损失函数：SI-SNR损失</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">si_snr</span></span><br><span class="line">    <span class="attr">conf:</span></span><br><span class="line">      <span class="attr">eps:</span> <span class="number">1.0e-7</span>           <span class="comment"># 数值稳定性参数</span></span><br><span class="line">    <span class="attr">wrapper:</span> <span class="string">pit</span></span><br><span class="line">    <span class="attr">wrapper_conf:</span></span><br><span class="line">      <span class="attr">weight:</span> <span class="number">5.0</span>           <span class="comment"># 较大权重表示更重视此损失</span></span><br><span class="line">      <span class="attr">independent_perm:</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h3 id="模型架构配置"><a href="#模型架构配置" class="headerlink" title="模型架构配置"></a>模型架构配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">encoder:</span> <span class="string">stft</span> <span class="comment"># STFT编码器配置</span></span><br><span class="line"><span class="attr">encoder_conf:</span></span><br><span class="line">    <span class="attr">n_fft:</span> <span class="number">256</span>            <span class="comment"># FFT点数</span></span><br><span class="line">    <span class="attr">hop_length:</span> <span class="number">128</span>       <span class="comment"># 帧移</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># STFT解码器配置</span></span><br><span class="line"><span class="attr">decoder:</span> <span class="string">stft</span></span><br><span class="line"><span class="attr">decoder_conf:</span></span><br><span class="line">    <span class="attr">n_fft:</span> <span class="number">256</span></span><br><span class="line">    <span class="attr">hop_length:</span> <span class="number">128</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分离器配置：RNN架构</span></span><br><span class="line"><span class="attr">separator:</span> <span class="string">rnn</span></span><br><span class="line"><span class="attr">separator_conf:</span></span><br><span class="line">    <span class="attr">rnn_type:</span> <span class="string">blstm</span>       <span class="comment"># 双向LSTM</span></span><br><span class="line">    <span class="attr">num_spk:</span> <span class="number">2</span>           <span class="comment"># 说话人数量</span></span><br><span class="line">    <span class="attr">nonlinear:</span> <span class="string">relu</span>      <span class="comment"># 激活函数</span></span><br><span class="line">    <span class="attr">layer:</span> <span class="number">3</span>             <span class="comment"># RNN层数</span></span><br><span class="line">    <span class="attr">unit:</span> <span class="number">896</span>           <span class="comment"># 隐层单元数</span></span><br><span class="line">    <span class="attr">dropout:</span> <span class="number">0.5</span>        <span class="comment"># Dropout比率</span></span><br></pre></td></tr></table></figure>
<h2 id="enh-sh-的分析"><a href="#enh-sh-的分析" class="headerlink" title="enh.sh 的分析"></a>enh.sh 的分析</h2><h3 id="Stage-1前的配置介绍"><a href="#Stage-1前的配置介绍" class="headerlink" title="Stage 1前的配置介绍"></a>Stage 1前的配置介绍</h3><h4 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h4><ol>
<li><p><strong>bash调试模式设置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -e        <span class="comment"># 遇到错误就退出</span></span><br><span class="line"><span class="built_in">set</span> -u        <span class="comment"># 使用未定义变量时报错</span></span><br><span class="line"><span class="built_in">set</span> -o pipefail  <span class="comment"># 管道中任一命令失败则整个管道失败</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>辅助函数</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 日志函数：打印时间戳和调用位置信息</span></span><br><span class="line"><span class="function"><span class="title">log</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> fname=<span class="variable">$&#123;BASH_SOURCE[1]##*/&#125;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="subst">$(date &#x27;+%Y-%m-%dT%H:%M:%S&#x27;)</span> (<span class="variable">$&#123;fname&#125;</span>:<span class="variable">$&#123;BASH_LINENO[0]&#125;</span>:<span class="variable">$&#123;FUNCNAME[1]&#125;</span>) $*&quot;</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 求最小值函数：用于计算并行作业数</span></span><br><span class="line">min() </span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>注：让我比较疑惑的一个点是为什么不把日志重定向输出到一个文件？直接echo的话不会很长吗？</p>
<h4 id="必填参数"><a href="#必填参数" class="headerlink" title="必填参数"></a>必填参数</h4><ol>
<li><strong>数据集相关</strong></li>
</ol>
<ul>
<li><code>--train_set</code>: 训练集名称</li>
<li><code>--valid_set</code>: 验证集名称</li>
<li><code>--test_sets</code>: 测试集名称列表</li>
</ul>
<h4 id="选填参数"><a href="#选填参数" class="headerlink" title="选填参数"></a>选填参数</h4><ol>
<li><p><strong>基本配置参数</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stage=1                <span class="comment"># 处理开始的阶段</span></span><br><span class="line">stop_stage=10000       <span class="comment"># 处理结束的阶段</span></span><br><span class="line">skip_data_prep=<span class="literal">false</span>   <span class="comment"># 是否跳过数据准备阶段</span></span><br><span class="line">skip_train=<span class="literal">false</span>       <span class="comment"># 是否跳过训练阶段  </span></span><br><span class="line">skip_eval=<span class="literal">false</span>        <span class="comment"># 是否跳过推理和评估阶段</span></span><br><span class="line">skip_packing=<span class="literal">true</span>      <span class="comment"># 是否跳过打包阶段</span></span><br><span class="line">skip_upload_hf=<span class="literal">true</span>    <span class="comment"># 是否跳过上传到HuggingFace阶段</span></span><br><span class="line">ngpu=1                 <span class="comment"># GPU数量(0表示使用CPU)</span></span><br><span class="line">num_nodes=1            <span class="comment"># 节点数量</span></span><br><span class="line">nj=32                  <span class="comment"># 并行作业数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>特征提取相关参数</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">feats_type=raw        <span class="comment"># 特征类型(raw或fbank_pitch)</span></span><br><span class="line">audio_format=flac     <span class="comment"># 音频格式:wav,flac等</span></span><br><span class="line">fs=16k                <span class="comment"># 采样率</span></span><br><span class="line">min_wav_duration=0.1  <span class="comment"># 最短音频长度(秒)</span></span><br><span class="line">max_wav_duration=20   <span class="comment"># 最长音频长度(秒)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>增强模型相关参数</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">enh_exp=             <span class="comment"># 增强实验目录路径</span></span><br><span class="line">enh_tag=             <span class="comment"># 增强模型训练结果目录的后缀</span></span><br><span class="line">enh_config=          <span class="comment"># 增强模型训练配置</span></span><br><span class="line">enh_args=            <span class="comment"># 增强模型训练的额外参数</span></span><br><span class="line">ref_num=2            <span class="comment"># 参考信号数量(等于说话人数量)</span></span><br><span class="line">inf_num=             <span class="comment"># 模型输出的推理结果数量</span></span><br><span class="line">noise_type_num=1     <span class="comment"># 输入音频中的噪声类型数量</span></span><br><span class="line">dereverb_ref_num=1   <span class="comment"># 去混响参考信号数量</span></span><br><span class="line">is_tse_task=<span class="literal">false</span>    <span class="comment"># 是否为目标说话人提取任务</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>训练数据相关参数</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use_dereverb_ref=<span class="literal">false</span>   <span class="comment"># 是否使用去混响参考信号</span></span><br><span class="line">use_noise_ref=<span class="literal">false</span>      <span class="comment"># 是否使用噪声参考信号</span></span><br><span class="line">variable_num_refs=<span class="literal">false</span>  <span class="comment"># 是否使用可变数量的参考信号</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>推理和评估相关参数</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">inference_args=<span class="string">&quot;--normalize_output_wav true --output_format wav&quot;</span>  <span class="comment"># 推理参数</span></span><br><span class="line">inference_model=valid.loss.ave.pth  <span class="comment"># 推理使用的模型文件</span></span><br><span class="line">scoring_protocol=<span class="string">&quot;STOI SDR SAR SIR SI_SNR&quot;</span>  <span class="comment"># 评分指标</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="各Stage功能详细分析"><a href="#各Stage功能详细分析" class="headerlink" title="各Stage功能详细分析"></a>各Stage功能详细分析</h3><h4 id="Stage-1-数据准备"><a href="#Stage-1-数据准备" class="headerlink" title="Stage 1: 数据准备"></a>Stage 1: 数据准备</h4><ul>
<li><strong>功能</strong>：准备训练、验证和测试数据集</li>
<li><strong>执行</strong>：调用local/data.sh脚本处理数据</li>
<li><strong>关键代码</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;stage&#125;</span> -le 1 ] &amp;&amp; [ <span class="variable">$&#123;stop_stage&#125;</span> -ge 1 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">log</span> <span class="string">&quot;Stage 1: Data preparation for data/<span class="variable">$&#123;train_set&#125;</span>, data/<span class="variable">$&#123;valid_set&#125;</span>, etc.&quot;</span></span><br><span class="line">    <span class="comment"># [Task dependent] 需要为新语料库创建data.sh</span></span><br><span class="line">    <span class="built_in">local</span>/data.sh <span class="variable">$&#123;local_data_opts&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li>
<li><strong>重要说明</strong>：<ul>
<li>这个阶段是任务相关的，需要根据具体的语料库创建相应的data.sh脚本</li>
<li>local_data_opts参数可以传递给data.sh进行数据处理的定制</li>
</ul>
</li>
<li><strong>运行产出</strong>：<ul>
<li>在 <code>data/$&#123;train_set&#125;</code>, <code>data/$&#123;valid_set&#125;</code> 等目录下生成：<ul>
<li>wav.scp：音频文件路径映射</li>
<li>utt2spk：话语到说话人映射</li>
<li>spk2utt：说话人到话语映射</li>
<li>mix.scp：混合音频文件列表</li>
<li>ref.scp：参考音频文件列表</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>注：笔者一开始在找了好久<code>data.sh</code>在哪里，后面发现在具体的数据集中(详见上文训练任务流程)</p>
<h4 id="Stage-2-速度扰动"><a href="#Stage-2-速度扰动" class="headerlink" title="Stage 2: 速度扰动"></a>Stage 2: 速度扰动</h4><ul>
<li><strong>功能</strong>：对训练数据进行速度扰动增强</li>
<li><strong>条件</strong>：仅在设置了speed_perturb_factors且不使用去混响参考时执行</li>
<li><strong>处理</strong>：对音频进行不同速度的扰动，生成增强数据</li>
<li><strong>运行产出</strong>：<ul>
<li>在 <code>data/$&#123;train_set&#125;_sp</code> 目录下生成：<ul>
<li>扰动后的音频文件和对应的配置文件</li>
<li>更新的 wav.scp, utt2spk, spk2utt 等文件</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Stage-3-音频格式化"><a href="#Stage-3-音频格式化" class="headerlink" title="Stage 3: 音频格式化"></a>Stage 3: 音频格式化</h4><ul>
<li><strong>功能</strong>：统一处理音频格式</li>
<li><strong>关键代码</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式化wav.scp文件</span></span><br><span class="line">scripts/audio/format_wav_scp.sh --nj <span class="string">&quot;<span class="variable">$&#123;nj&#125;</span>&quot;</span> --cmd <span class="string">&quot;<span class="variable">$&#123;train_cmd&#125;</span>&quot;</span> \</span><br><span class="line">    --out-filename <span class="string">&quot;<span class="variable">$&#123;spk&#125;</span>.scp&quot;</span> \</span><br><span class="line">    --audio-format <span class="string">&quot;<span class="variable">$&#123;audio_format&#125;</span>&quot;</span> --fs <span class="string">&quot;<span class="variable">$&#123;fs&#125;</span>&quot;</span> <span class="variable">$&#123;_opts&#125;</span> \</span><br><span class="line">    <span class="string">&quot;data/<span class="variable">$&#123;dset&#125;</span>/<span class="variable">$&#123;spk&#125;</span>.scp&quot;</span> <span class="string">&quot;<span class="variable">$&#123;data_feats&#125;</span><span class="variable">$&#123;_suf&#125;</span>/<span class="variable">$&#123;dset&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>处理步骤</strong>：<ol>
<li>重新创建”wav.scp”文件</li>
<li>统一音频格式和采样率</li>
<li>处理多说话人的情况</li>
<li>支持segments文件的分割处理</li>
</ol>
</li>
<li><strong>运行产出</strong>：<ul>
<li>在 <code>$&#123;data_feats&#125;/$&#123;dset&#125;</code> 目录下：<ul>
<li>统一格式后的音频文件</li>
<li>更新的 wav.scp 文件</li>
<li>各说话人的 .scp 文件</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Stage-4-数据筛选"><a href="#Stage-4-数据筛选" class="headerlink" title="Stage 4: 数据筛选"></a>Stage 4: 数据筛选</h4><ul>
<li><strong>功能</strong>：移除不符合长度要求的音频数据</li>
<li><strong>关键代码</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算最小和最大长度（样本数）</span></span><br><span class="line">_fs=$(python3 -c <span class="string">&quot;import humanfriendly as h;print(h.parse_size(&#x27;<span class="variable">$&#123;fs&#125;</span>&#x27;))&quot;</span>)</span><br><span class="line">_min_length=$(python3 -c <span class="string">&quot;print(int(<span class="variable">$&#123;min_wav_duration&#125;</span> * <span class="variable">$&#123;_fs&#125;</span>))&quot;</span>)</span><br><span class="line">_max_length=$(python3 -c <span class="string">&quot;print(int(<span class="variable">$&#123;max_wav_duration&#125;</span> * <span class="variable">$&#123;_fs&#125;</span>))&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据长度筛选数据</span></span><br><span class="line">&lt;<span class="string">&quot;<span class="variable">$&#123;data_feats&#125;</span>/org/<span class="variable">$&#123;dset&#125;</span>/utt2num_samples&quot;</span> \</span><br><span class="line">    awk -v min_length=<span class="string">&quot;<span class="variable">$&#123;_min_length&#125;</span>&quot;</span> -v max_length=<span class="string">&quot;<span class="variable">$&#123;_max_length&#125;</span>&quot;</span> \</span><br><span class="line">    <span class="string">&#x27;&#123; if ($2 &gt; min_length &amp;&amp; $2 &lt; max_length ) print $0; &#125;&#x27;</span> \</span><br><span class="line">    &gt;<span class="string">&quot;<span class="variable">$&#123;data_feats&#125;</span>/<span class="variable">$&#123;dset&#125;</span>/utt2num_samples&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>处理步骤</strong>：<ol>
<li>将时间长度转换为样本数</li>
<li>根据样本数筛选音频</li>
<li>更新相关的scp文件</li>
</ol>
</li>
<li><strong>运行产出</strong>：<ul>
<li>在 <code>$&#123;data_feats&#125;/$&#123;dset&#125;</code> 目录下：<ul>
<li>筛选后的 utt2num_samples 文件</li>
<li>更新后的 wav.scp, spk.scp 等文件</li>
<li>移除不符合长度要求的音频条目</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Stage-5-统计收集"><a href="#Stage-5-统计收集" class="headerlink" title="Stage 5: 统计收集"></a>Stage 5: 统计收集</h4><ul>
<li><strong>功能</strong>：收集训练所需的统计信息</li>
<li><strong>关键代码</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;python&#125;</span> -m <span class="variable">$&#123;train_module&#125;</span> \</span><br><span class="line">    --collect_stats <span class="literal">true</span> \</span><br><span class="line">    <span class="variable">$&#123;_train_data_param&#125;</span> \</span><br><span class="line">    <span class="variable">$&#123;_valid_data_param&#125;</span> \</span><br><span class="line">    --train_shape_file <span class="string">&quot;<span class="variable">$&#123;_logdir&#125;</span>/train.JOB.scp&quot;</span> \</span><br><span class="line">    --valid_shape_file <span class="string">&quot;<span class="variable">$&#123;_logdir&#125;</span>/valid.JOB.scp&quot;</span> \</span><br><span class="line">    --output_dir <span class="string">&quot;<span class="variable">$&#123;_logdir&#125;</span>/stats.JOB&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>处理步骤</strong>：<ol>
<li>收集训练和验证数据的统计信息</li>
<li>生成shape文件</li>
<li>聚合统计信息</li>
</ol>
</li>
<li><strong>运行产出</strong>：<ul>
<li>在 <code>$&#123;_logdir&#125;</code> 目录下：<ul>
<li>stats.JOB 目录：包含统计信息</li>
<li>train.JOB.scp：训练数据shape信息</li>
<li>valid.JOB.scp：验证数据shape信息</li>
<li>global_stats：全局统计信息</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Stage-6-模型训练"><a href="#Stage-6-模型训练" class="headerlink" title="Stage 6: 模型训练"></a>Stage 6: 模型训练</h4><ul>
<li><strong>功能</strong>：执行增强模型的训练</li>
<li><strong>关键代码</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;python&#125;</span> -m <span class="variable">$&#123;train_module&#125;</span> \</span><br><span class="line">    <span class="variable">$&#123;_train_data_param&#125;</span> \</span><br><span class="line">    <span class="variable">$&#123;_valid_data_param&#125;</span> \</span><br><span class="line">    <span class="variable">$&#123;_train_shape_param&#125;</span> \</span><br><span class="line">    <span class="variable">$&#123;_valid_shape_param&#125;</span> \</span><br><span class="line">    <span class="variable">$&#123;_fold_length_param&#125;</span> \</span><br><span class="line">    --resume <span class="literal">true</span> \</span><br><span class="line">    --output_dir <span class="string">&quot;<span class="variable">$&#123;enh_exp&#125;</span>&quot;</span> \</span><br><span class="line">    <span class="variable">$&#123;init_param:+--init_param $init_param&#125;</span> \</span><br><span class="line">    <span class="variable">$&#123;_opts&#125;</span> <span class="variable">$&#123;enh_args&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>处理步骤</strong>：<ol>
<li>设置训练数据和验证数据</li>
<li>配置训练参数</li>
<li>支持断点续训</li>
<li>可选预训练模型初始化</li>
</ol>
</li>
<li><strong>运行产出</strong>：<ul>
<li>在 <code>$&#123;enh_exp&#125;</code> 目录下：<ul>
<li>config.yaml：模型配置文件</li>
<li>模型检查点文件（*.pth）</li>
<li>trainer.log：训练日志</li>
<li>验证结果和曲线图表</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Stage-7-推理处理"><a href="#Stage-7-推理处理" class="headerlink" title="Stage 7: 推理处理"></a>Stage 7: 推理处理</h4><ul>
<li><strong>功能</strong>：使用训练好的模型进行音频增强</li>
<li><strong>关键代码</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;python&#125;</span> -m <span class="variable">$&#123;infer_module&#125;</span> \</span><br><span class="line">    --ngpu <span class="string">&quot;<span class="variable">$&#123;_ngpu&#125;</span>&quot;</span> \</span><br><span class="line">    --fs <span class="string">&quot;<span class="variable">$&#123;fs&#125;</span>&quot;</span> \</span><br><span class="line">    <span class="variable">$&#123;_data_param&#125;</span> \</span><br><span class="line">    --key_file <span class="string">&quot;<span class="variable">$&#123;_logdir&#125;</span>&quot;</span>/keys.JOB.scp \</span><br><span class="line">    --train_config <span class="string">&quot;<span class="variable">$&#123;enh_exp&#125;</span>&quot;</span>/config.yaml \</span><br><span class="line">    --model_file <span class="string">&quot;<span class="variable">$&#123;enh_exp&#125;</span>&quot;</span>/<span class="string">&quot;<span class="variable">$&#123;inference_model&#125;</span>&quot;</span> \</span><br><span class="line">    --output_dir <span class="string">&quot;<span class="variable">$&#123;_logdir&#125;</span>&quot;</span>/output.JOB</span><br></pre></td></tr></table></figure></li>
<li><strong>处理步骤</strong>：<ol>
<li>加载训练好的模型</li>
<li>对测试集进行推理</li>
<li>生成增强后的音频</li>
<li>支持GPU推理</li>
</ol>
</li>
<li><strong>运行产出</strong>：<ul>
<li>在 <code>$&#123;_logdir&#125;/output.JOB</code> 目录下：<ul>
<li>enhanced.wav：增强后的音频文件</li>
<li>keys.JOB.scp：处理的音频键值对</li>
<li>推理日志和结果文件</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Stage-8-评分"><a href="#Stage-8-评分" class="headerlink" title="Stage 8: 评分"></a>Stage 8: 评分</h4><ul>
<li><strong>功能</strong>：评估增强效果</li>
<li><strong>关键代码</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;python&#125;</span> -m espnet2.bin.enh_scoring \</span><br><span class="line">    --key_file <span class="string">&quot;<span class="variable">$&#123;_logdir&#125;</span>&quot;</span>/keys.JOB.scp \</span><br><span class="line">    --output_dir <span class="string">&quot;<span class="variable">$&#123;_logdir&#125;</span>&quot;</span>/output.JOB \</span><br><span class="line">    <span class="variable">$&#123;_ref_scp&#125;</span> \</span><br><span class="line">    <span class="variable">$&#123;_inf_scp&#125;</span> \</span><br><span class="line">    --ref_channel <span class="variable">$&#123;ref_channel&#125;</span> \</span><br><span class="line">    --flexible_numspk <span class="variable">$&#123;flexible_numspk&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>评估指标</strong>：<ul>
<li>STOI: 语音可懂度</li>
<li>SDR: 信号失真比</li>
<li>SAR: 伪影比</li>
<li>SIR: 干扰比</li>
<li>SI_SNR: 尺度不变信噪比</li>
</ul>
</li>
<li><strong>运行产出</strong>：<ul>
<li>在 <code>$&#123;_logdir&#125;/output.JOB</code> 目录下：<ul>
<li>scoring.txt：包含各项评分指标</li>
<li>score_stats：详细的评分统计</li>
<li>各指标的得分分布图</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Stage-9-10-ASR评估"><a href="#Stage-9-10-ASR评估" class="headerlink" title="Stage 9-10: ASR评估"></a>Stage 9-10: ASR评估</h4><ul>
<li><strong>功能</strong>：使用ASR模型评估增强效果</li>
<li><strong>关键代码</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;python&#125;</span> -m espnet2.bin.asr_inference \</span><br><span class="line">    --ngpu <span class="string">&quot;<span class="variable">$&#123;_ngpu&#125;</span>&quot;</span> \</span><br><span class="line">    --data_path_and_name_and_type <span class="string">&quot;<span class="variable">$&#123;_ddir&#125;</span>/wav.scp,speech,<span class="variable">$&#123;_type&#125;</span>&quot;</span> \</span><br><span class="line">    --key_file <span class="string">&quot;<span class="variable">$&#123;_logdir&#125;</span>&quot;</span>/keys.JOB.scp \</span><br><span class="line">    --asr_train_config <span class="string">&quot;<span class="variable">$&#123;asr_exp&#125;</span>&quot;</span>/config.yaml \</span><br><span class="line">    --asr_model_file <span class="string">&quot;<span class="variable">$&#123;asr_exp&#125;</span>&quot;</span>/<span class="string">&quot;<span class="variable">$&#123;inference_asr_model&#125;</span>&quot;</span> \</span><br><span class="line">    --output_dir <span class="string">&quot;<span class="variable">$&#123;_logdir&#125;</span>&quot;</span>/output.JOB</span><br></pre></td></tr></table></figure></li>
<li><strong>处理步骤</strong>：<ol>
<li>使用ASR模型解码增强后的音频</li>
<li>计算字错误率(CER)或词错误率(WER)</li>
<li>生成评估报告</li>
</ol>
</li>
<li><strong>运行产出</strong>：<ul>
<li>在 <code>$&#123;_logdir&#125;/output.JOB</code> 目录下：<ul>
<li>asr_inference.txt：ASR解码结果</li>
<li>text：识别的文本结果</li>
<li>wer.txt/cer.txt：错误率统计</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Stage-11-模型打包"><a href="#Stage-11-模型打包" class="headerlink" title="Stage 11: 模型打包"></a>Stage 11: 模型打包</h4><ul>
<li><strong>功能</strong>：将训练好的模型打包</li>
<li><strong>处理</strong>：<ul>
<li>打包模型文件</li>
<li>打包配置信息</li>
<li>生成发布包</li>
</ul>
</li>
<li><strong>运行产出</strong>：<ul>
<li>在 <code>$&#123;enh_exp&#125;/pack</code> 目录下：<ul>
<li>model.zip：打包的模型文件</li>
<li>config.yaml：配置文件副本</li>
<li>README.md：模型说明文档</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Stage-12-上传模型"><a href="#Stage-12-上传模型" class="headerlink" title="Stage 12: 上传模型"></a>Stage 12: 上传模型</h4><ul>
<li><strong>功能</strong>：将模型上传到HuggingFace</li>
<li><strong>条件</strong>：当skip_upload_hf=false时执行</li>
<li><strong>处理</strong>：<ul>
<li>准备上传文件</li>
<li>配置HuggingFace仓库</li>
<li>上传模型</li>
</ul>
</li>
<li><strong>运行产出</strong>：<ul>
<li>在 HuggingFace仓库中：<ul>
<li>上传的模型文件和配置</li>
<li>模型卡片（model card）</li>
<li>示例代码和使用说明</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>enh1.sh是一个完整的语音增强处理流程脚本，包含了从数据准备到模型训练、评估的全过程。通过合理配置参数，可以灵活控制处理流程的各个环节。使用时需要特别注意：</p>
<ol>
<li>必须提供训练集、验证集和测试集的名称</li>
<li>根据需求合理设置GPU数量和并行作业数</li>
<li>可以通过stage和stop_stage控制执行流程</li>
<li>评估阶段提供了多种评估方式，包括客观指标和ASR评估</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>语音增强</tag>
        <tag>技术分析</tag>
        <tag>AI辅助</tag>
        <tag>espnet</tag>
      </tags>
  </entry>
  <entry>
    <title>大二寒假小记</title>
    <url>/2025/02/16/%E5%A4%A7%E4%BA%8C%E5%AF%92%E5%81%87%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>今天是寒假最后一天了，在此写下自己的第一篇博客，尽管寒假没怎么学习，但希望这篇小记作为新学期一个良好的开始！<br><span id="more"></span></p>
<h2 id="时间跨度"><a href="#时间跨度" class="headerlink" title="时间跨度"></a>时间跨度</h2><ul>
<li>学校寒假：2025.1.20 —— 2025.2.17</li>
<li>实际假期：2025.1.17 —— 2025.2.17</li>
<li>总计：31天</li>
</ul>
<h2 id="计划-vs-现实"><a href="#计划-vs-现实" class="headerlink" title="计划 vs 现实"></a>计划 vs 现实</h2><ol>
<li>旅游阶段（1.17 ~ 2.4）</li>
<li>学习阶段（2.5 ~ 2.16）<ul>
<li>espnet学习</li>
<li>TOEFL备考</li>
<li>驾照考试</li>
<li>个人博客搭建</li>
</ul>
</li>
</ol>
<p>理想很丰满，现实很……</p>
<p>当然这个寒假也不是什么都没有干，通过寒假前半段时间的完全放松，我彻底放下了一些感情上的羁绊，也逐渐思考发掘人生方向，将自己从低欲望的状态中解救出来，对心理学产生兴趣，重新发现存在主义的奥妙等等。后半段时间，每天被各种琐碎的事务占据，但也进行了一些不算完整的规划与思考。总体而言，从心理上在逐渐改进自己的认知。</p>
<h2 id="TimeLine"><a href="#TimeLine" class="headerlink" title="TimeLine"></a>TimeLine</h2><div class="table-container">
<table>
<thead>
<tr>
<th>日期</th>
<th>日程</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.17</td>
<td>考完</td>
</tr>
<tr>
<td>1.17 ~ 1.22</td>
<td>崇礼滑雪</td>
</tr>
<tr>
<td>1.23 ~ 1.26</td>
<td>长沙同学聚会</td>
</tr>
<tr>
<td>1.27 ~ 1.30</td>
<td>Kuala Lumpur</td>
</tr>
<tr>
<td>1.31 ~ 2.3</td>
<td>Langkawi</td>
</tr>
<tr>
<td>2.4</td>
<td>春节档电影大赏</td>
</tr>
<tr>
<td>2.5 ~ 2.15</td>
<td>科二科三，搭建个人博客</td>
</tr>
<tr>
<td>2.16</td>
<td>南京 -&gt; 上海</td>
</tr>
</tbody>
</table>
</div>
<p>除此之外</p>
<ul>
<li>更换新电脑<code>ThinkBook 14 G6+__</code><ul>
<li>处理器：Intel(R) Core(TM) Ultra 9 185H   2.30 GHz</li>
<li>机带 RAM：32.0 GB (31.6 GB 可用)</li>
<li>硬盘 1T</li>
<li>NVIDIA 4060 8G</li>
<li>最重要的是只有1.5kg啊！！！<br>注：当时换电脑为wsl的转移折腾了两三天，碰到了各种奇奇怪怪的问题，之后打算写一篇帖子记录下。</li>
</ul>
</li>
<li>换了新书包 <code>__LEVEL8 MOMENT__</code>  <ul>
<li>颜值超高！分区便捷</li>
<li>美中不足的是1.35kg略沉，于是包+电脑与之前相比重量几乎没什么变化(doge)</li>
</ul>
</li>
<li>拔牙<ul>
<li>关于我三年前拔了一颗智齿现在又长出来三颗忍痛拔掉一颗的故事</li>
</ul>
</li>
</ul>
<h3 id="滑雪"><a href="#滑雪" class="headerlink" title="滑雪"></a>滑雪</h3><p>在崇礼云顶练习单板滑雪4天，从小白到勉强可以在中级道上换刃</p>
<h3 id="同学聚会"><a href="#同学聚会" class="headerlink" title="同学聚会"></a>同学聚会</h3><ul>
<li>与北大生科帅哥在商场挑衣服，邀请一家店的售货员去另一家店看鞋搭配上身</li>
<li>三人狂吃自主烤肉长达三小时</li>
<li>与复旦广告学美女朋友在长沙丰盈西里探店</li>
<li>陪同ICL术后朋友打桌球（对还是那三个人）</li>
<li>高中小组F4聚会！经典复刻</li>
</ul>
<h3 id="马来游记"><a href="#马来游记" class="headerlink" title="马来游记"></a>马来游记</h3><p>锐评：虽然KL五星酒店很便宜，但城市建设与公共治理你是真的比不上隔壁Singapore啊（尤其是去年在隔壁过年，感受尤为强烈）</p>
<p>一家人进行着时间利用率最低性价比最低的度假（但也有别样的风味，度假嘛是这样的</p>
<p>体现为，在最后一天double decker时发现每一个知名景点我们都去过至少两遍了，比如武吉免登（在那个麦当劳路口来回过至少五遍）</p>
<p>Langkawi人蛮少的，珍南沙滩也很舒服，但是海水实在是不怎么清澈，浮潜潜了个寂寞，不过奶油大虾特别好吃！强推卓峰海鲜餐厅的奶油老虎虾（我们去吃了两次）</p>
<p>专门为本次独家购入一台<code>__DJI FLIP__</code>,飞行重任自然落到我头上了，只能说想好好运镜尝试拍大片，但是技术不允许()</p>
<h3 id="春节档电影"><a href="#春节档电影" class="headerlink" title="春节档电影"></a>春节档电影</h3><h4 id="哪吒2"><a href="#哪吒2" class="headerlink" title="哪吒2"></a>哪吒2</h4><p>票房爆了，我也不想过多讨论，只是我个人感觉立意不比第一部，或者说我更喜欢第一部，但视效没得说。</p>
<h4 id="唐探1900"><a href="#唐探1900" class="headerlink" title="唐探1900"></a>唐探1900</h4><p>很多人觉得爱国色彩植入太生硬，但我觉得刚刚好，何尝不是一种政治导向呢(doge)</p>
<h3 id="驾考"><a href="#驾考" class="headerlink" title="驾考"></a>驾考</h3><p>我是速通派，去年寒假一晚上速通科一，结果去年十月考C1科目二上坡起步挂了，想着回来也没多少时间练车索性转了C2</p>
<p>于是</p>
<ul>
<li>科二在考场里练了十把就上考场了，第一把直角转弯右侧压线，第二把过</li>
<li>科三考前某晚在考场狂开两小时熟悉线路，考试当天模拟的时候甚至还不记得点火要踩刹车，好在是第四个考，看了三遍怎么都不会出错了，一把过。</li>
<li>但是！！！本来打算周五下午去考课四拿证，都想好发什么文案了“是的，我们在一起了”（当天情人节），结果全长沙驾考培训都不上班，运气实在是太差了呜呜呜，估计要等到暑假才有时间回来拿证了……</li>
</ul>
<h3 id="南京"><a href="#南京" class="headerlink" title="南京"></a>南京</h3><p>终于来了心心念念的红山动物园，不知道是我已经看过太多了还是怎么，来之前以为多能体现人与自然和谐共生，“让动物看人而不是人看动物”，结果发现也不过还是个动物园，但是文创确实很好看！不枉我在Bamboomate排队二十分钟。</p>
<h2 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h2><p>to be continued……</p>
<h3 id="存在主义哲学"><a href="#存在主义哲学" class="headerlink" title="存在主义哲学"></a>存在主义哲学</h3><p>萨特才是灵魂！！！</p>
<ul>
<li>《存在主义是一种人道主义》</li>
<li><strong>存在先于本质</strong></li>
</ul>
<h3 id="体验主义"><a href="#体验主义" class="headerlink" title="体验主义"></a>体验主义</h3><h3 id="积极心理学"><a href="#积极心理学" class="headerlink" title="积极心理学"></a>积极心理学</h3><h4 id="弗洛姆"><a href="#弗洛姆" class="headerlink" title="弗洛姆"></a>弗洛姆</h4><ul>
<li>爱的艺术</li>
</ul>
]]></content>
      <categories>
        <category>日程管理</category>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>日常记录</tag>
        <tag>旅行</tag>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>信息收集帖(持续更新)</title>
    <url>/2025/02/21/%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="adaa8b499617656e374425c8c078162263f19d5d9eefdb9ff672823e635645ef">42f59dd9f792a26c4a34d7806b09502bbcf0be2b86ec1c260d3c73e837ec0f6960b23f3103ca7c3c2c9669c3a41fa0c6527faf963f0b471bbd8da1085cfd986ad53579a4abdba169b0409c615bd11de5e34c91d832ebd3aba12bb8a5ab5a00fbb28b42fa1ac3be6e4cf3c68b8f0f5b3bef1757375d50e466e2a3aa7e676d48078efc1a9d7009278591bb9b62ee103d16b6e394f4890a2d50ca8b4b632eec5132104fff7c3b52bd9b4a520d09ea0c48546bd998e2b41cc43615acfa33e36e326903029a8fad2053b3cefcde7b68e6d1b05d0f8372a70d46df1322e67a19f33845ee315c6051431da2063b5827ec3b43f1f72592207767919a2e2b76f8e142781bb713e1c54fc75fb02ae131b863010f4bcce0b32c4d190129e6a244d32e7accc06feef5a9e38714b117db28236b615a04245f507dc3ec48b03b4c6bf7d8a11d271a0e12d2605375ce7c45988b970416dba842de0ba1c0b8a165be8a0e33fe18c5bb1a47def217c0337e845147e6d6e60bbc7eaaadce981539e9e0f6dbfd32d45095502bbfe553d5199ae3e1f9fe36bb4f3d274f47501528ed76959842a5057c1004b69120c26fe4e12b042d81dc2492ee83f07aa393f9fa5e60f236b0c311b82fa175345999c16ce0a7651eb582ab0bced36513b1f475ccd3684409d7d0adb8b7016f085b90573dc2b03744a18cfb301c2dc3a4604183c2a00c7a8891b66bce941d149aec3ab61687706b3a436cc3171e5b4792c45cfe4108de0ba81ed18f1d232538f4f9631733ff815c960ea42fe51a4be6cd894dc44daa4d2efc5c7c8ebce38d035721acad425a8938b6e40e525bead63f2947b8823f36fc797ad92e616e80e5111df13afb34d7c02ccb904879ab7bec7f7582743ced535750798bb4856a3b19668bb033209d50d65994ffdd1cf2afb3300cb2e4d4bf6ff4b074ad9b9c8ad24a9d18c2d76b0c3ec1b6ea30553b6e9daa1cbd2dcbd5f37ae70e58758276bd6c6be70e8c3b38e2704c139a8b568dc238bde373c58b2553fe8bf2c7d8f1646a3aacf40b2ac73e2a1a63ad5efab146aba636b7f87b51cffbfc6ec240d8585bf6b8b57027cae5d897421c458af344a01db399e049901f0c5e711a26d3cb7587ff13a1290cffa591f977e2f9551efcfc77d8a3ec06d028adecffca2138366dff2c3cccf02debb96f2c5a7d8c72fe61c00cbe963f24e7a0e385f75e5407c7716acf3d40ead88b4629f5e365f71b229e66f6003c610467a2ebb88655e464a7cc2c265518725e93c0651c16bb9a9eda59e361a7a5c9cc427aec1a07458d8809ab139c3748560f7849763a18952477185c504a79d3ec6d2689f9e576b3508d0d9e25e37101466c50e3601ca0f361e86c33452af340348206be809ca52b3587adfb95fd8d7eb2d04eae802ff9fe98b7154887a70c64175f756f7671766e19c61244f50e9303f0167b18b2794c9c9ac8f3ec573c3a862e4c52184f467f991dbaaeed0a280a215a43778f7658d184ecd0dbbb8e91752d8efb8b20614b282c416915986f1ae7aeb402aa5ca599cc9dd2d0eaec39bccc3c5e71e826430736237013aba50457f395bd1c152fcdda79ed73125ccc8179ea27f61ed45f24e59ace7191770ee01f21445eb4c69e1d5cd14aa4b33fff66a045de23d3e1d8018d38b42153e2d47df5c3ea7356f5de153f06f8fecd646898ad55d5a1044453c1c3e1baf6320bcb98a88b0e8d698c7d23aa7381ec1d20158f249ed1e4ef57121d3791ea579a44398a3810e8df668afb702f786663394e7b0ec62363e035206928e358a2a26bdc14a5081f3009ffaa8d7a20930c35125d2b4fce0031b974ec7fa361cd18cf9684c4767fbf5fc3766be60258724ba64790bfac578a81ef50c7a7e19fbf3949021c8bb38a96b41782c206ee8b8ce1bbebdfd10e6789134931cfae50695f62bbecfa5c75f8025750405f12a8ddc8c5c509627b4cc960fa729bef81b2f5c36602f3fed8c1e0a566195a69b8691fc58a7c1e5cf68f69a4842a932712cf484f9c045d93c35d3fcf9ef2b6ae7ff0dfcaf0c55c4bf494b3e1c1064e0771638faeb2ee33ed909bc6736119c75ab3d28566feaa73871e2f16f4535f51a8897178292472db44e62e68f6cf6d112dbedad42455d7e694846867936cc70c540f3b0b93de172faf58f323fa173c53a0d2fdf32986e4d881fc5c2d2e0879bdaa4255605734c1374b77987a038f4775ecf32534e0b9538cc079468a7f07b507b218a148daaf06d05057cb3cd3ec1590d50cb40598d2eae7a842cf814593ac9707789ed65e0919df942f9c4f678015ec7bf74b31499258a2fc132d7a181ee290820ff09b744ef77184a7a3e0a85565aa65ab68a1bf61e6f80d895f9f2dadc812b66595a712df5d484c63296ebd1ca51dd8f4ca458f35c727bf1935b460975d4aa9bc5e3913f9cb846387c3ac3adbf5ab854b0d739e6b64093b620f1df00664fb08e93ad80a93e78a684e211cbe10fb5e5d9c31617dad2858415beb0e10be49dbbea35adeba7f2e0ece93f3a9a3d0c1a89d2dab6e5304fe3792847f965d937c197f09b6c086dd4b266cfe304b217195634131e886cac9492e6f21c14cc4041030574459ebe5381761712bb95a64ff364af997e73877432e009b0c9b041cbb8ad0ee6a950b5d3b603b2a69398a1f89a58f2308047d63e0dabb48dcdd3f9ee9d576b2511e8769804ebd2f7b25fa3d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>学业规划</tag>
      </tags>
  </entry>
  <entry>
    <title>日记</title>
    <url>/2025/02/21/%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
